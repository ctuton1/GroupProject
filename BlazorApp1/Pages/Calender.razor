@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@page "/calender"
@using BlazorApp1.Data
<h1>Calendar</h1>
@if (DeleteDialogOpen)
{
    @foreach (Data.EventDataModel eD in GetUserEvents())
    {
        string dateComparison = @eD.Date.Date.ToString();
        string[] split = dateComparison.Split(" 00:00");
        dateComparison = split[0];
        if (dateComparison==dateSelected)
        {
           string owner= GetEventOwner(eD.EventOwnerId);
          <ModalDialogue Title="@eD.Name" StartDate="eD.Date" EventOrganiser="@owner" Description="@eD.Description" OnClose="@OnDeleteDialogClose"></ModalDialogue>


        }
       
    }
}

<head>
    <style>
        table, th, td {
            border: 1px solid white;
            border-collapse: collapse;
        }

        th, td {
            background-color: #ffb4a4;
        }

    </style>
</head>

<label for="months">Select a month:</label>


<select name="month" id="month" @onchange="LoadCalender">

    <option value="" selected disabled hidden>Choose here</option>
    <option value=01>January</option>
    <option value=02>February</option>
    <option value=03>March</option>
    <option value=04>April</option>
    <option value=05>May</option>
    <option value=06>June</option>
    <option value=07>July</option>
    <option value=08>August</option>
    <option value=09>September</option>
    <option value=10>October</option>
    <option value=11>November</option>
    <option value=12>December</option>
</select>


<table>
    <thead>
        <tr>
            <th>@days[0]</th>
            <th>@days[1]</th>
            <th>@days[2]</th>
            <th>@days[3]</th>
            <th>@days[4]</th>
            <th>@days[5]</th>
            <th>@days[6]</th>
        </tr>
    </thead>

    <tbody>

        @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
        {

            <tr>
                @for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    int day = weekIndex * 7 + (dayIndex + 1);
                    string date = ""+day+"/" + GetSelectedMonth()+"/2023";
                    int id=-1;
                    <td style="vertical-align: top; text-align: left; width:100px; height:100px">
                        <h5>
                            @day
                        </h5>
                          @foreach (Data.EventDataModel eD in GetUserEvents())
                            {
                            string dateComparison = @eD.Date.Date.ToString();
                            string[] split = dateComparison.Split(" 00:00");
                            dateComparison = split[0];
                            if (dateComparison==date)
                            {
                                id = eD.Id;
                                <div id="event-details">
                                    <b><u>@eD.Name</u></b> 
                                    
                                    </div>
                                    <button type="button" class="btn btn-link" @onclick="()=>OnDeleteDialogOpen(date,id)" data-bs-toggle="modal" data-bs-target="#modal">View Event</button>
                                }
                            }  
                        
                        


                    </td>
                    
                }
            </tr>
        }
    </tbody>
</table>

@code {
    string userId;
    string month;
    int day;
    private string GetEventOwner(int iD)
    {
        Data.MySQLDB db = new Data.MySQLDB();
        return db.GetUserName(iD);
    }

    private string GetSelectedMonth()
    {
        return month;
    }
    private int getDay()
    {
        return day;
    }
    private void SetSelectedMonth(string monthChosen)
    {
        month=monthChosen;
    }
    private void setDay(int daySelected)
    {
        daySelected = day;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetSessionUser();
        StateHasChanged();
    }


    private async Task GetSessionUser()
    {
        userId = await sessionStorage.GetItemAsync<String>("userId");
    }

    public bool DeleteDialogOpen { get; set; }

    private List<EventDataModel> GetUserEvents()
    {
        Data.MySQLDB db = new Data.MySQLDB();
        List<EventDataModel> events = db.GetUserEvents(Convert.ToInt32(userId));
        return events;
    }

    
    private void OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        if (accepted==true)
        {
           DeleteDialogOpen = false;
        Data.MySQLDB db = new Data.MySQLDB();
        db.DeleteEvent(deleteId);
        StateHasChanged(); 
        }
        StateHasChanged();

    }
    private string dateSelected;
    private int deleteId;
    private void OnDeleteDialogOpen(string date, int id)
    {
        DeleteDialogOpen = true;
        dateSelected = date;
        deleteId = id;
        StateHasChanged();

    }
    string[] monthNames = new string[11];
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    protected override void OnInitialized()
    {
        //monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToArray();
        GenerateCalenderHead();
        GenerateCalenderBody();

        //GenrateCalendarEvents();
    }

    private void LoadCalender(ChangeEventArgs e)
    {
        var monthValue = e.Value;
        var month = monthValue.ToString();
        int monthIndex = DateTime.ParseExact(month, "MM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);
        GenerateCalenderHead();
        GenerateCalenderBody();
        SetSelectedMonth(month);
        

    }
    
    private void GenerateCalenderHead()
    {
        var day1 = new List<string>();
        for (var calDate = startDate; calDate < endDate; calDate = calDate.AddDays(1))
        {
            day1.Add(calDate.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }

    private void GenerateCalenderBody()
    {
        weeks = new List<WeekClass>();
        int flag = 0;
        WeekClass week = new WeekClass();
        List<CalanderEvent> dates = new List<CalanderEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countDays = 0;
        for (var calDate = startDate; calDate <= endDate; calDate = calDate.AddDays(1))
        {

            flag++;
            dates.Add(new CalanderEvent()
                {
                    DateValue = calDate.ToString("dd-MMM-yyyy"),
                    DayName = calDate.ToString("dddd"),
    
                    //TODO put event in the day
                    
                });
                
            if (flag == 7)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                dates = new List<CalanderEvent>();
                flag = 0;
            }
            if (countDays == totalDays)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countDays++;
        }
    }
}
