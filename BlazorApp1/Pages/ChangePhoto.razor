@page "/profile/changephoto"
@using BlazorApp1.Data
@inject IConfiguration config
@inject NavigationManager NavManager

<head>
</head>
<body>

    <div id="profile-background">

                <img class="h-50 w-50 rounded-circle profile-bar" src="assets/Profile Icon.svg" />


        <div id="profile-body-container" class="m-x-5 w-100 bg-white rounded-profile p-3">


           
            <div id="profile-description-container">
                
            </div>


            <div id="profile-edit-container">
                <InputFile OnChange="@LoadFiles"  class="form-control" accept=".png,.jpg,.jpeg"></InputFile>
            </div>
            @if(errors.Count > 0)
            {
                <h2>Errors</h2>
                <ul class="text-danger">
                    @foreach(var error in errors)
                    {
                        <li>@error</li>
                    }
                </ul>
            }

            
        </div>
    </div>

</body>




@code {

    private long maxFileSize = 1024 * 1024 * 3; //Equals 3MB
    private int maxFiles = 1;
    private List<string> errors = new();


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();
        if(e.FileCount > maxFiles) //Check if too many files are uploaded
        {
            errors.Add($"Error: Attempting to upload more files than allowed. Files uploaded: {e.FileCount}. Max Files: {maxFiles}");
            return;
        }


        foreach (var file in e.GetMultipleFiles(maxFiles))
        {
            try
            {
                if(Path.GetExtension(file.Name) != "png" ||Path.GetExtension(file.Name) != "jpg"|| Path.GetExtension(file.Name) != "jpeg")
                {
                    errors.Add($"Error: File type is not allowed.");
                    return;
                }
                string newFileName = Path.ChangeExtension( //create file name
                Path.GetRandomFileName(), 
                Path.GetExtension(file.Name));

                string path = Path.Combine(config.GetValue<string>("FileStorage")!, newFileName); //Create file path

                await using FileStream fs = new(path, FileMode.Create); //Open file
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs); //Write file
                MySQLDB db = new MySQLDB();
                db.UpdateUserPhoto(file.Name, 1);
                db.CloseConnection();
            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }

        }
    }
}
