@page "/profile/changephoto"
@using BlazorApp1.Data
@inject IConfiguration config
@inject NavigationManager NavManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<head>
</head>
<body>

    <div id="profile-background">

        <img class="h-50 w-50 rounded-circle profile-bar" src="@GetProfilePhoto()" />


        <div id="profile-body-container" class="m-x-5 w-100 bg-white rounded-profile p-3">



            <div id="profile-description-container">
            </div>


            <div id="profile-edit-container">
                <InputFile OnChange="@LoadFiles" class="form-control" accept=".png,.jpg,.jpeg"></InputFile>
            </div>
            @if (errors.Count > 0)
            {
                <h2>Errors</h2>
                <ul class="text-danger">
                    @foreach (var error in errors)
                    {
                        <li>@error</li>
                    }
                </ul>
            }


        </div>
    </div>

</body>




@code {

    private long maxFileSize = 1024 * 1024 * 3; //Equals 3MB
    private int maxFiles = 1;
    private List<string> errors = new();

    string userId;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();
        if (e.FileCount > maxFiles) //Check if too many files are uploaded
        {
            errors.Add($"Error: Attempting to upload more files than allowed. Files uploaded: {e.FileCount}. Max Files: {maxFiles}");
            return;
        }


        foreach (var file in e.GetMultipleFiles(maxFiles))
        {
            try
            {
                
                    string newFileName = Path.ChangeExtension( //create file name
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

                    string path = Path.Combine("wwwroot\\userphotos\\", newFileName); //Create file path

                    await using FileStream fs = new(path, FileMode.Create); //Open file
                    await file.OpenReadStream(maxFileSize).CopyToAsync(fs); //Write file
                    MySQLDB db = new MySQLDB();
                    db.UpdateUserPhoto(newFileName, Convert.ToInt32(userId));
                    db.CloseConnection();

            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }

        }

    }

    private string GetProfilePhoto()
    {

        Data.MySQLDB db = new Data.MySQLDB();
        string photoName = db.GetProfilePhoto(Convert.ToInt32(userId));
        Console.WriteLine(photoName);
        string src = $"userphotos\\{photoName}";
        return src;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSessionUser();
    }

    private async Task GetSessionUser()
    {
        userId = await sessionStorage.GetItemAsync<String>("userId");
    }
}
